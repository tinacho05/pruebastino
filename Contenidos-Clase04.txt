Clase 04: 
=========


React:
======

¿Por que no usar html, css, js, bootstrap y utilizar react o angular?
HTML/CSS/JS + Bootstrap para:
- Mantenimiento y Escalabilidad Difícil
- Gestión Manual del Estado: Con JS puro, el estado (datos dinámicos) se gestiona manualmente
- Bajo Rendimiento en Apps Complejas, actualizar el DOM manualmente es costoso
- Código No Reutilizable

Con React:
  Componentización: React te permite dividir la interfaz de usuario en piezas reutilizables e independientes llamadas componentes. Cada componente maneja su propia lógica y presentación. Esto facilita la construcción de interfaces complejas, ya que puedes reutilizar componentes como un "Carrito de Compras", una "Card de Producto" o un "Botón de Pagar" en diferentes partes de la aplicación. En un e-commerce, esto es crucial para mantener la coherencia y ahorrar tiempo.

  Rendimiento optimizado: React utiliza un Virtual DOM (Document Object Model). En lugar de actualizar todo el HTML de una página cada vez que un dato cambia, React solo actualiza los componentes específicos que necesitan ser modificados. Esto resulta en una experiencia de usuario mucho más fluida y rápida. En un sitio como Mercado Libre, que tiene miles de productos, filtros y comentarios, esta optimización es vital para el rendimiento.

  Manejo del estado: React tiene un sistema para gestionar el estado de la aplicación, que es la información que cambia con el tiempo (por ejemplo, los productos en el carrito, el stock disponible, si un usuario ha iniciado sesión). Cuando el estado de un componente cambia, React automáticamente actualiza solo la parte de la interfaz de usuario que depende de ese estado, sin necesidad de manipular el DOM manualmente.



Herramientas que vamos a utilizar:
- Gestión de dependencias (npm). Gestor de paquetes para JavaScript y Node.js, para instalar librerías/frameworks.
  instalar node https://nodejs.org/es/download , reiniciar VSC y probar si funcion npm -v
  npm gestor de paquetes de javascript node.js
  choco gestor de Windows
  apt gestor de linux ubuntu
  dnf gestor de linux fedora
  mvn gestor java
  pip gestor de paquetes de python

- Bundling y desarrollo rápido (Vite). Herramienta acelera el desarrollo con librerías/frameworks.
- Bootstrap librería CSS. Librería de CSS/JS para acelerar el diseño de una UI



Intro React: 
https://es.react.dev/
La librería JavaScript (facebook)  para interfaces de usuario web y nativas
Con React construyes la web y con React Native construyes la aplicación móvil.
React fue creado para desarrollar Single Page Applications (SPAs), que son las interfaces de usuario de las páginas web. Al usar React, creas componentes para construir toda la interfaz de la web, que se renderiza y actualiza en el navegador.
React Native es un framework que permite usar la sintaxis de React para construir aplicaciones móviles nativas para iOS y Android.
Podes crear UI para paginas web, moviles, escritorio.

Características de React:
- basado en componentes, ver ej: https://www.mercadolibre.com.ar/
  ui con componentes que se repiten, haces tu página con piezas que se reutilizan, 
  si modificas una se modifican todas las reutilizaciones del compo
  Vue, Angular y React trabajan con componentes 
- usa el Virtual DOM para actualizar solo las partes necesarias de la interfaz, reduciendo el costo de operaciones en el DOM real.

Código abierto: desde 2013
https://github.com/facebook/react

¿Por que utilizar React, Angular, Vue, Svelte?
- el más demandado: facebook, twitter, instagram, mercadolibre, ws web, 
- se puede aplicar a moviles con React Native (microsoft), contadorReact.jsx
- angular: google, gmail, youtube


Crear un proyecto React:
=======================
create-react-app https://create-react-app.dev/docs/getting-started/
lenta, se quedó atrás

Vite, rapido (Vue, Svelte): 
Vite es un herramienta de construcción (build tool) ultrarrápida y moderna diseñada para simplificar y optimizar el desarrollo de aplicaciones web, incluyendo proyectos con React. velocidad y configuración mínima.
https://vite.dev/guide/

crear proyecto react: 
npm create vite@latest
nombre del proyecto
React
JavaScript 

Instalar y preparar el proyecto React:
posicionarse en carpeta del proyecto cd hola-react
npm install
  1.  Instala las dependencias del proyecto: Lee el archivo `package.json`, que es un manifiesto de las dependencias que necesita tu proyecto.
  2.  Descarga los paquetes: Descarga todos los paquetes listados en `package.json` de la base de datos de npm.
  3.  Crea la carpeta `node_modules`: Una vez que los paquetes se descargan, los instala en una carpeta llamada `node_modules` en la raíz de tu proyecto.
  4.  Crea el archivo `package-lock.json`: Genera o actualiza el archivo `package-lock.json`, que registra las versiones exactas de cada paquete y sus subdependencias. Esto garantiza que cualquier persona que trabaje en el proyecto tenga exactamente las mismas versiones de las librerías, evitando así posibles errores.

Ejecutar el proyecto
npm run dev

Ver la app en el navegador
http://localhost:5173/

Ruta de ejecución de react:
index.html -> main.jsx -> app.jsx
modificar app.jsx , comprobar HMR seleccionando título y modificando componente

Hot Module Replacement (HMR)
Permite actualizar módulos en una aplicación en ejecución sin recargar toda la página. Esto es especialmente útil durante el desarrollo, ya que permite ver los cambios en tiempo real sin perder el estado de la aplicación.
Ventajas clave
  Velocidad de desarrollo: Acelera drásticamente tu flujo de trabajo porque los cambios aparecen de forma inmediata.
  Mantiene el estado: Es la mayor ventaja. No pierdes el estado de tu aplicación. Por ejemplo, si estás completando un formulario o has navegado a una sección específica, puedes hacer cambios en el código y ver el resultado sin tener que volver a llenar el formulario o navegar de nuevo.

Como se define un componente
ej1 https://es.react.dev/
Video.jsx

JSX: JavaScript XML
===================
JSX significa JavaScript XML. Es una extensión de la sintaxis de JavaScript que permite escribir código similar a HTML dentro de un archivo de JavaScript
Componente es una funcion javascript que devuelve html (xml): js+xml -> jsx 
xml lenguaje de marcado para transportar y almacenar datos
dentro de las {} se ejecuta js


se transpila de jsx a js
const miElemento = <h1>Hola, mundo</h1>;
const miElemento = React.createElement("h1", null, "Hola, mundo");


ej2: explicar cada línea, utilización de método map js
Construir interfaces de usuario a partir de componentes.
Los componentes de React son funciones de JavaScript. 
 
ej3: explicar cada línea, instro a useState
Los componentes de React reciben datos y devuelven lo que debe aparecer en la pantalla. 
Puedes pasarles nuevos datos en respuesta a una interacción, como cuando el usuario escribe en un campo de texto. React actualizará entonces la pantalla para que se corresponda con los nuevos datos.
Estados: Cuando se modifica el estado (valor de la variable) se vuelve a renderizar el componente 
useState es un Hook en React que te permite añadir estado a tus componentes funcionales. 


react 
Más declarativo (describe qué debe pasar en lugar de cómo hacerlo)
El estado está encapsulado en el componente
Más fácil de extender y mantener
Mejor rendimiento con el Virtual DOM de React


Como se nombran los componentes:
componentes se nombran PascalCase -> para que no se confunda con html 
PascalCase react (UserDetail)
camelCase java (getUserByName)
snake_case base datos 
Kebab-case css 

Construir primer componente Card:
style inline como objetos
las clases de style se llaman className en lugar de class, en js class en palabra reservada
se puede usar bootstrap, tailwind css, chakra

https://chakra-ui.com/
gama de componentes de UI listos para usar, como botones, inputs, modales, tablas, 

corrección de componenten -> aplica a todos

props:
Las props (abreviatura de "properties") en React son la forma en que los componentes se comunican entre sí. Son un mecanismo para pasar datos de un componente padre a un componente hijo.
también se pueden enviar funciones
props no se pueden modificar 

props children 
se pueden enviar texto o elementos html 
children componente -> hace más reutilizable el componente 

Trabajo Laboratorio:
Crear y mostrar un componente react, cualquiera, que reciba props con valores, props con funciones y props children, por ejemplo Card.jsx
Crear una rama en el repositorio del grupo y subir dichos cambios

valor x defecto

dif entre componentes y elementos html 


estados:
estado (valor de variable), si cambia el valor se renderiza de nuevo el componente 


hooks utilidades
da funcionalidad al componente en sus diferentes partes

useState
variable, el setter
const [count, setCount] = useState(0);
count:
Es la variable de estado que almacena el valor actual (en este caso, el valor inicial es 0).

setCount:
Es la función que actualiza count y dispara un re-renderizado del componente.

estado separado por cada componente, 

es declarativo y imperativo
decla: quiero ver esto si es true, sino esto, se declara la ui
Se enfoca en el "qué" en lugar del "cómo
Oculta los detalles de bajo nivel
cada cambio de estado, reacciona y lo refleja en la ui

impera:hace esto, lo otro, etc 
indicar que hacer, que parte del código debo modificar 

dom Virtual: solo modifica en html es el componente, la parte del componente
comparar html + inspect 
foto de dom, 
compara dom y su vdom, solo modifica lo necesario
si se actuliza el padre se actualizan los hijos



=========================================

ESLint es una herramienta de linting para JavaScript (y tecnologías relacionadas como TypeScript, JSX y frameworks como React, Vue o Angular). Su función principal es analizar tu código en busca de errores, patrones sospechosos o inconsistencias de estilo, ayudando a mantener un código limpio, legible y libre de errores comunes

package.json es el corazón de la configuración del proyecto, donde se definen todas las dependencias necesarias para el desarrollo y producción
dependencies
react	Biblioteca central de React para crear componentes.
react-dom	Permite renderizar componentes React en el navegador.

devDependencies
Son herramientas necesarias solo durante el desarrollo (no se incluyen en el build de producción).

Dependencia	Propósito
vite	El núcleo del servidor de desarrollo y bundler.
@vitejs/plugin-react	Soporte para React (JSX, Fast Refresh).
eslint	Linter para detectar errores y mantener estilo de código.
eslint-plugin-react	Reglas específicas de ESLint para React.
prettier	Formateador de código (opcional, pero recomendado).
typescript	Si usas TypeScript (opcional).






Ejemplo de Manipulación de DOM sin react
Ejemplo de Manipulación de DOM con react













Ventajas:
  1. Reutilización de Código componentes
  2. Encapsulamiento y Mantenibilidad
    Cada componente maneja su propio estado (valores de variables, cuando cambia el valor de una variable se re-renderiza el componente) y lógica, haciendo el código más fácil de mantener: menos acoplamiento, problemas aislados, cambios localizados
  3. Rendimiento Optimizado
    React usa el Virtual DOM para actualizar solo las partes necesarias de la UI, evitando recargas completas de página.
    Ejemplo: Si un componente hijo cambia, React no re-renderiza toda la aplicación, solo ese componente.
  4. Desarrollo Multiplataforma
    Los componentes de React pueden usarse en:
    Web (React DOM).
    Móvil (React Native).
    Escritorio (React Native for Windows).
  6. Flujo de Datos Predictivo
  React sigue un flujo unidireccional de datos (de padres a hijos), lo que hace más fácil:
  Rastrear cambios, evitar efectos secundarios no deseados como Angular
  7. JSX: HTML + JavaScript
  Combina lógica y marcado en un mismo lugar de forma declarativa .



================================
Ejemplos de React: https://es.react.dev/

dependencias
react 
react.dom

HMR (Hot Module Replacement)   




Librería (Library):
Conjunto de funciones, componentes o código preescrito que llamas y controlas desde tu aplicación.
Decido cuándo y cómo usarla (ej: llamar una función para validar un formulario).
No impone una estructura en tu proyecto o metodología de trabajo.
Ej: Es como usar herramientas sueltas de una caja (ej: un martillo, un destornillador).
React (UI components). facebook


Framework:
Conjunto de herramientas y reglas que define la estructura y flujo de tu aplicación.
Él controla el flujo y llama a tu código cuando es necesario (Inversión de Control - IoC).
Obliga a seguir una arquitectura específica (ej: MVC, componentes).
Es como usar un molde o esqueleto que ya tiene espacios para tus piezas.
Ej: sería como comprar un kit completo de mueble prefabricado que ya incluye todas las piezas, instrucciones paso a paso y hasta las herramientas específicas necesarias para ensamblarlo.
Angular (framework completo). google



================================
Ejemplos de React: https://es.react.dev/

dependencias
react 
react.dom

HMR (Hot Module Replacement)   




grupos 7 4 2 5