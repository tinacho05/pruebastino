
Git:
Nos permite tener trazabilidad del proyecto; dividirlo por ramas y que cada integrante pueda trabajar por su parte. 
tambien volver a versiones anteriores en caso de "meter la pata"

Github: plataforma en remoto que aloja los repositorios.



COMANDOS GIT COMPLETOS

CONFIGURACION INICIAL
git --version                                           # Verificar instalación
git config --global user.name "tu_nombre"              # Configurar nombre
git config --global user.email "tu_email@ejemplo.com"  # Configurar email

COMANDOS BÁSICOS DEL REPOSITORIO
git init                                # Inicializar repositorio local
git status                             # Ver estado del repositorio
git add <archivo>                      # Agregar archivo específico al staging area
git add .                              # Agregar todos los archivos al staging area
git commit -m "Mensaje descriptivo"   # Confirmar cambios
git log                                # Ver historial de commits

TRABAJO CON REPOSITORIOS REMOTOS
git remote add origin <url-repositorio>    # Vincular repositorio remoto
git remote -v                              # Ver repositorios remotos vinculados
git clone <url-repositorio>                # Clonar repositorio remoto
git push -u origin <nombre-rama>           # Subir cambios al repositorio remoto
git pull origin <nombre-rama>              # Traer cambios del repositorio remoto

MANEJO DE RAMAS (BRANCHES)
git branch                          # Ver ramas locales
git branch <nombre-rama>            # Crear nueva rama
git checkout <nombre-rama>          # Cambiar de rama (comando tradicional)
git switch <nombre-rama>            # Cambiar de rama (comando moderno)
git merge <nombre-rama>             # Fusionar rama en la rama actual
git branch -d <nombre-rama>         # Eliminar rama

FLUJO DE TRABAJO TÍPICO

Proyecto Nuevo:
git init
git add .
git commit -m "Initial commit"
git remote add origin <url-repositorio>
git push -u origin master

Trabajar con Ramas:
git branch feature/login    CREO LA RAMA "LOGIN"
git switch feature/login    CAMBIO A LA RAMA "LOGIN"
# ... hacer cambios ...
git add .
git commit -m "Añadir funcionalidad de login"
git push -u origin feature/login
git switch master
git merge feature/login          FUSIONA LOS ARCHIVOS
git branch -d feature/login      

Sincronizar con Repositorio Remoto:
git pull origin master
# ... resolver conflictos si los hay ...
git add .
git commit -m "Resolver conflictos"
git push origin master


REACT 


¿Por qué React y no solo HTML/CSS/JS?
• HTML/JS: difícil mantenimiento, gestión manual del estado, bajo rendimiento, poco reutilizable.
• React: componentes reutilizables, Virtual DOM, gestión automática del estado.

Reutilizable: se usa el mismo codigo para un mismo componente.

Herramientas clave
• npm → gestor de paquetes.
• Vite → bundler rápido.
• Bootstrap / Tailwind / Chakra → librerías CSS.
• ESLint / Prettier → estilo y calidad del código.

Creación de un proyecto React
• 1. npm create vite@latest
• 2. npm install
• 3. npm run dev
• 4. Navegador: http://localhost:5173/
• Flujo: index.html → main.jsx → App.jsx
• HMR: cambios en tiempo real sin perder el estado.

JSX (JavaScript XML)
• Sintaxis mezcla HTML + JS.
• Ej: const el = Hola; equivale a React.createElement().

Componentes y Props
• Nombrar en PascalCase.
• Props: datos o funciones padre→hijo.
• props.children: contenido dentro del componente.

Estado y Hooks
• useState: agrega estado a un componente.
• Cada cambio re-renderiza el componente.
• Declarativo: qué mostrar. Imperativo: cómo hacerlo.

Librería vs Framework
• Librería (React): tú controlas cuándo usarla.
• Framework (Angular): controla el flujo y estructura.

Ventajas principales de React
• Reutilización de componentes.
• Encapsulamiento y mantenibilidad.
• Rendimiento optimizado con Virtual DOM.
• Multiplataforma (web, móvil, escritorio).
• Flujo de datos predecible.
• JSX: lógica + estructura juntas.

RESUMEN REACT

¿Qué es React?
React es una librería de JavaScript creada por Facebook para construir interfaces de usuario. 
Permite crear aplicaciones web, móviles y de escritorio.

Características principales:
• Virtual DOM: Solo actualiza las partes que cambiaron
• Componentización: Divide la UI en piezas reutilizables
• JSX: Sintaxis que mezcla HTML + JavaScript
• Hooks: Funciones para manejar estado (useState)
• Programación declarativa: Describes QUÉ mostrar, no CÓMO

Componentes:
• Son funciones de JavaScript que devuelven JSX
• Se nombran en PascalCase (ej: UserProfile)
• Reciben props (datos) del componente padre
• props.children: contenido dentro del componente

Estado:
• useState: Hook para agregar estado a componentes
• Cada cambio de estado re-renderiza el componente
• El estado fluye de padre a hijo (unidireccional)

Ventajas vs HTML/CSS/JS puro:
• Mejor mantenimiento en aplicaciones grandes
• Gestión automática del estado
• Mayor rendimiento con Virtual DOM
• Código reutilizable y modular
• HMR: cambios en tiempo real

Librería vs Framework:
• React (librería): Tú controlas cuándo usarla
• Angular (framework): Controla el flujo de tu aplicación


renderizacion selectiva -> se va modificando una pequeña parte de la pagina. 



Diferencia entre Framework y Librería
Definiciones Básicas
Librería
Qué es: Conjunto de funciones y herramientas que TÚ utilizas
Control: Tú decides cuándo y cómo usarla
Analogía: Es como una caja de herramientas - tomas las que necesitas
Framework
Qué es: Estructura completa que controla el flujo de tu aplicación
Control: El framework decide cuándo llamar tu código
Analogía: Es como un kit de construcción con instrucciones específicas


Diferencias principales entre React y Angular
React es una biblioteca de JavaScript desarrollada por Facebook que se centra en la creación de interfaces de usuario, ofreciendo mayor flexibilidad y un menor conjunto de herramientas integradas. Es más fácil de aprender pero requiere configuración adicional.

Angular es un framework completo desarrollado por Google que incluye todo lo necesario para crear aplicaciones web complejas, con herramientas integradas para routing, formularios y testing, pero tiene una curva de aprendizaje más pronunciada.






un componente REACT es una funcion de javascript
PascalCase: etiqueta de react; con la primera mayuscula la Diferenciamos

JavaScript + xml: mezcla funciones de js que devuelve html

camelCase


Los Hooks son funciones especiales de React que:
- Permiten usar estado y otras características de React en componentes funcionales
- Siempre empiezan con "use" (ej: useState, useEffect)
- Solo se pueden usar en componentes React o custom hooks
- No se pueden usar dentro de condicionales o loops

Ejemplos principales:
- useState: Maneja el estado del componente
- useEffect: Maneja efectos secundarios (ej: llamadas API)
- useContext: Accede al contexto de React
- useRef: Referencias a elementos DOM o valores persistentes

Ventajas:
- Simplifican la lógica del componente 
- Permiten reutilizar lógica entre componentes
- Reemplazan el uso de clases en React
- Mejor manejo del ciclo de vida del componente


Props (Properties):
- Son datos que un componente padre pasa a un componente hijo
- Son de solo lectura (inmutables)
- Permiten la comunicación entre componentes
- Se pasan como atributos HTML

Ejemplo básico:
Padre -> <Hijo nombre="Juan" edad={25} />
Hijo -> function Hijo(props) { 
          return <h1>Hola {props.nombre}</h1>
        }

Relación Padre-Hijo:
- Padre: Componente que contiene/renderiza a otros componentes
- Hijo: Componente que es renderizado dentro de otro
- El flujo de datos es unidireccional (de padre a hijo)
- Un padre puede tener múltiples hijos
- Un hijo solo puede tener un padre

Los props son la forma principal de pasar datos entre componentes en React, manteniendo un flujo de datos predecible y fácil de rastrear.





























